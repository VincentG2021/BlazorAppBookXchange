@page "/exemplaireCard"
@using BlazorAnimate
@using BlazorAppBookXchange.Components.ExemplaireComponents
@using BlazorAppBookXchange.Components.Modals
@using BlazorAppBookXchange.Models

@if (exemplairesList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var exemplaire in exemplairesList)
    {
        @if (!exemplaire.IsCardFlipped)
        {
            <div class="d-inline-block" style="min-width: 20%; max-width: 40%; overflow-wrap: break-word; margin: 3px;">
                <Animate Animation="Animations.FlipRight" Duration="TimeSpan.FromSeconds(0.5)" @ref="animateFlip" IsManual="false">
                    <div class="card mb-6">
                        <div class="row g-0">
                            <div class="col-md-4">
        @*                            <img src="..." class="img-fluid rounded-start" alt="...">
        *@                            <svg class="bd-placeholder-img img-fluid rounded-start" width="100%" height="250" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Image" preserveAspectRatio="xMidYMid slice" focusable="false">
                                    <title>Placeholder</title>
                                    <rect width="100%" height="100%" fill="#868e96"></rect>
                                    <text x="50%" y="50%" fill="#dee2e6" dy=".3em">Image</text>
                                </svg>
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@exemplaire.Titre</h5>
                                    <p class="card-text">@exemplaire.Auteur</p>
                                    <p class="card-text">@(exemplaire.Synopsis.Substring(0,exemplaire.Synopsis.Length > 150 ? 150 : exemplaire.Synopsis.Length)) @(exemplaire.Synopsis.Length > 40 ? "(...)" : "")</p>
                                    <p class="card-text"><small class="text-muted">Disponible</small></p>
                                    <boutton class="btn-sm btn-primary" @onclick="() => SetSelectedCard(exemplaire)" style="cursor:pointer;">
                                        <i class="bi bi-eye-fill text-info"></i> Voir détails
                                    </boutton>
                                    @*<a href="#" class="btn btn-primary">Go somewhere</a>  *@                         
                                </div>
                            </div>
                        </div>
                    </div>
                </Animate>
            </div>
        }
        @if (exemplaire.IsCardFlipped)
        {
            <div class="d-inline-block" style="min-width: 20%; max-width: 40%; overflow-wrap: break-word; margin: 3px;">
                <Animate Animation="Animations.FlipLeft" Duration="TimeSpan.FromSeconds(0.5)" @ref="animateFlip" IsManual="false">
                    <div class="card mb-6">
                        <div class="row g-0">
                            <div class="col-md-4">
        @*                            <img src="..." class="img-fluid rounded-start" alt="...">
        *@                            <svg class="bd-placeholder-img img-fluid rounded-start" width="100%" height="250" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Image" preserveAspectRatio="xMidYMid slice" focusable="false">
                                    <title>Placeholder</title>
                                    <rect width="100%" height="100%" fill="#868e96"></rect>
                                    <text x="50%" y="50%" fill="#dee2e6" dy=".3em">Image</text>
                                </svg>
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">ISBN: @exemplaire.Isbn</h5>
                                    <p class="card-text">Parution: @exemplaire.Parution.ToString("dd/MM/yyyy")</p>
                                    <p class="card-text">Format: @exemplaire.Format</p>
                                    <p class="card-text">Id membre: @exemplaire.IdMembre</p>
    @*                                <p class="card-text"><small class="text-muted">Disponible</small></p>
    *@                                
                                    <boutton class="btn-sm btn-primary" @onclick="() => SetSelectedCard(exemplaire)" style="cursor:pointer;">
                                        <i class="bi bi-eye text-primary"></i> Voir Résumé
                                    </boutton>
                                    <boutton class="btn-sm btn-success" @onclick="() => OpenXchangeDialog(exemplaire)" style="cursor:pointer;">
                                        Xchange
                                    </boutton>
                                    @*<a href="#" class="btn btn-primary">Go somewhere</a>*@

                                </div>
                            </div>
                        </div>
                    </div>
                </Animate>
            </div>
        }
    }
}


@if (XchangeDialogOpen)
{
    // Appel de ModalDialog, passage du Parameter de OnClose delegate (pointe vers la méthode privée OnDeleteDialogClose)
    <ModalDialog DialogType="ModalDialog.ModalDialogType.OkCancel" Title="Valider ou annuler" Text="Confirmez-vous demander l'échange de cet exemplaire ? (accès membre identifié)" OnClose="@OnXchangeDialogClose"></ModalDialog>
}

@*@if (IdSelectedExemplaire != 0)
{
    <EditionList IdSelectedExemplaire="@IdSelectedExemplaire" TitreSelectedExemplaire="@TitreSelectedExemplaire"></EditionList>
}
else
{
    <p>Aucun livre sélectionné</p>
}
*@

@*<BlazorAppBookXchange.Components.ExemplaireComponents.ExemplaireLists.ExemplaireList></BlazorAppBookXchange.Components.ExemplaireComponents.ExemplaireLists.ExemplaireList>*@