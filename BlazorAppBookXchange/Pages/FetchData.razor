@page "/fetchdata"
@using BlazorAppBookXchange.Components.Modals
@using BlazorAppBookXchange.Models
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr @onclick="() => forecast.IsRowExpanded = !forecast.IsRowExpanded">

                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(forecast)">Delete</button>
                    </td>
                </tr>
                @if (forecast.IsRowExpanded)
                {
                    <tr>@forecast.ExpandableContent</tr>
                }
            }
        </tbody>
    </table>
}

@if (DeleteDialogOpen)
{
    // we call the ModalDialog, passing the Parameter of OnClose delegate. This points to the OnDeleteDialogClose private method
    <ModalDialog DialogType="ModalDialog.ModalDialogType.DeleteCancel" Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="@OnDeleteDialogClose"></ModalDialog>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        //new fields added below
        public bool IsRowExpanded { get; set; } = false;

        public string ExpandableContent { get; set; } = "Lorem Ipsum";
    }



    public bool DeleteDialogOpen { get; set; } // This property determines if the ModalDialog will be shown
    private WeatherForecast _bookToDelete = null;

    private async Task LoadData()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        StateHasChanged();
    }



    private void OpenDeleteDialog(WeatherForecast forecast)
    {
        _bookToDelete = forecast;
        DeleteDialogOpen = true;
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            Console.WriteLine("OKAYYYYYYY");
            //await Http.DeleteAsync($"api/Earnings/{_bookToDelete.IdLivre}");
            await LoadData();
            _bookToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

}
